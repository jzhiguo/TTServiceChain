package com.servicechain.shareservice.util;

import lombok.Data;
import lombok.EqualsAndHashCode;
import javax.persistence.*;
import javax.validation.constraints.DecimalMin;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import java.io.File;
import java.io.Serializable;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Data
@EqualsAndHashCode(callSuper = true)
@Entity(name = "t_product")
public class Product extends AbstractEntity{
	@NotNull
    @NotBlank
    private String userId;
    @NotBlank 
    private String productName;
    //一对一的三行核心代码
    @OneToOne(cascade = CascadeType.ALL,fetch = FetchType.EAGER)
    @JoinColumn(name = "product_id")
    private ProductDetail productDetail;
    
    //以下都是一对多的三处核心代码
    @OneToMany(mappedBy = "product", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER)
    private List<FileInfo> fileInfoList = new ArrayList<>();
    
    public void addFileInfo(FileInfo fileInfo) {
    	fileInfoList.add(fileInfo);
    	fileInfo.setProduct( this );
	}

	public void removeFileInfo(FileInfo fileInfo) {
		fileInfoList.remove(fileInfo);
		fileInfo.setProduct(null);
	}
    
}

package com.servicechain.shareservice.util;


import lombok.Data;
import lombok.EqualsAndHashCode;
import javax.persistence.Entity;
import javax.validation.constraints.Email;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Pattern;

@Data
@EqualsAndHashCode(callSuper = true)
@Entity(name = "t_product_detail")
public class ProductDetail extends AbstractEntity{
	
	//一对一的一行核心代码
	private String productId;//关联条件,默认为空
	
	private String contacts;
	@NotBlank
	@Pattern(regexp = "^\\d{11}$", message = "手机号码格式错误")
	private String phone;
	@Email(message = "只能是有效的邮箱地址")
	private String email;
	
}

package com.servicechain.shareservice.util;

import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.ManyToOne;
import com.fasterxml.jackson.annotation.JsonIgnore;
import lombok.Data;
import lombok.EqualsAndHashCode;

@Data
@EqualsAndHashCode(callSuper = true)
@Entity(name = "t_file_info")
public class FileInfo extends AbstractEntity{

	private String url;
	
	private String fileName;
	
	private String fileDir;
	
	private String serverFileName;
	
	//配合一对多的三行核心代码
	@ManyToOne
	@JsonIgnore
	private Product product;//关联条件是product_id,默认为空
	
	@Enumerated(EnumType.STRING)
    private FileStatus status = FileStatus.VALID;
	
	public enum FileStatus {
		VALID, INVALID
	}
	
}

create table if not exists t_product//规范的mysql建表语句
(
    id                 nvarchar(255) not null,
    user_id            varchar(255)  not null comment '用户id',
    product_name       varchar(255)  not null comment '商品名称',
    product_id         varchar(255)   default null comment '商品id',
    created_by         varchar(32) default null comment '创建人',
    created_date       datetime    default current_timestamp comment '创建时间',
    primary key (id)
);

create table if not exists t_product_detail
(
    id                    nvarchar(255) not null,
    product_id            varchar(255)  default null comment '商品id',
    contacts              varchar(32)   not null comment '联系人',
    phone                 varchar(64)   not null comment '电话',
    email                 varchar(64)   not null comment '邮件',
    created_by            varchar(50) default null comment '创建人',
    created_date          datetime    default current_timestamp comment '创建时间',
    primary key (id)
);

create table if not exists t_file_info
(
    id                 nvarchar(255) not null,
    product_id          varchar(255)  default null comment '商品id',
    file_name           varchar(255) not null comment '原附件名称',
    file_dir           varchar(255) not null comment '附件路径',
    server_file_name   varchar(255) not null comment '服务器上的附件名称',
    created_by         varchar(50) default null comment '创建人',
    created_date       datetime    default current_timestamp comment '创建时间',
    primary key (id)
);

代码中的使用：
if (null != fileIds && fileIds.length>0) {//有附件编辑
              log.info("编辑组件/代码--有附件编辑fileIds:{}",fileIds);
              List<FileInfo> fileInfoList = new ArrayList<>();
              for (int i = 0; i < fileIds.length; i++) {
                   String id = fileIds[i];
                   FileInfo fileInfoResult = fileInfoRepository.findById(id).orElseThrow(() ->{
                        log.warn("编辑组件/代码--有附件--先查询附件信息--对应ID无法获取对象");
                        return new NotFoundException("编辑组件/代码--有附件--先查询附件信息--无法获取实体对象");
                   });
                   fileInfoResult.setProduct(getProduct);
                   fileInfoList.add(fileInfoResult);
              }
              getProduct.getFileInfoList().clear();
              getProduct.getFileInfoList().addAll(fileInfoList);
              log.info("编辑组件/代码---有附件---save之前的对象,商品id:{},文件信息:{}",getProduct.getId(),getProduct.getFileInfoList());
              productResult = productRepository.save(getProduct);
              
官方文档
https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#associations-one-to-one


@Data
@EqualsAndHashCode(callSuper = true)
@Entity(name = "t_product")
public class Product extends AbstractEntity{
	@NotNull
    @NotBlank
    private String userId;
    @NotBlank 
    private String productName;
    @NotNull
    @Enumerated(EnumType.STRING)
    private ProductType productType = ProductType.CODE;
    @DecimalMin(value = "0.00", inclusive = true, message = "不能小于{value}")
    @Column(name = "price",precision=20, scale=2)
    private BigDecimal price;
    private String lastEdition;
    @NotNull
    @Enumerated(EnumType.STRING)
    private SettlementType settlementType = SettlementType.OFFLINE;
    @NotNull
    private LocalDateTime releaseDate;
    @Min(value = 0, message = "不能小于{value}")
    private int buyNumber;
    private String label;
    @Enumerated(EnumType.STRING)
    private ProductStatus status = ProductStatus.ON;
    @Enumerated(EnumType.STRING)
    private AuditStatus auditStatus = AuditStatus.WAIT;//审核状态
        
    @OneToOne(cascade = CascadeType.ALL,fetch = FetchType.EAGER)
    @JoinColumn(name = "product_id")
    private ProductDetail productDetail;
    
    @Transient
    private String[] ids;
    
    @Transient
    private String[] deleteFileIds;
    
    public enum ProductStatus {
        ON, OFF
    }
        
    public enum AuditStatus {
    	WAIT,SUCCESS,FAIL
    }
    
    @OneToMany(mappedBy = "product", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER)//, cascade = CascadeType.ALL
    private List<FileInfo> fileInfoList = new ArrayList<>();
    
    public void addFileInfo(FileInfo fileInfo) {
    	fileInfoList.add(fileInfo);
    	fileInfo.setProduct( this );
	}

	public void removeFileInfo(FileInfo fileInfo) {
		fileInfoList.remove(fileInfo);
		fileInfo.setProduct(null);
	}
}

#添加表字段语句
alter table t_product add audit_status varchar(20) default null comment '审核状态(WAIT:待审核;SUCCESS:审核通过;FAIL:审核未通过)';

#考虑到修改表之前的老数据
update t_product set audit_status = SUCCESS where audit_status = NULL;


import com.fasterxml.jackson.annotation.JsonIgnore;
import com.newtouch.servicechain.accountsservice.entity.validgroup.NewEntityChecks;
import lombok.AccessLevel;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Setter;
import org.passay.*;
import org.springframework.security.crypto.factory.PasswordEncoderFactories;
import org.springframework.util.StringUtils;
import javax.persistence.*;
import javax.validation.constraints.*;
import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

@Entity(name = "Users")
@Data
@EqualsAndHashCode(callSuper = true)
public class User extends AbstractEntity {
    @NotBlank
    @Setter(AccessLevel.NONE)
    @Size(max = 100)
    @Email(regexp = "^[a-zA-Z0-9.]+@newtouch\\.com$", message = "当前只能使用'@newtouch.com'后缀邮箱进行注册", groups = NewEntityChecks.class)
    @Column(name = "username",columnDefinition="varchar(100) COMMENT '用户名'")
    private String username;

    @Setter(AccessLevel.NONE)
    @NotBlank(groups = NewEntityChecks.class, message = "密码不能为空")
    @Column(name = "password",columnDefinition="varchar(100) COMMENT '登录密码'")
    @JsonIgnore
    private String password;

    @Size(min = 1, max = 50, groups = NewEntityChecks.class, message = "用户名称不能为空，并且长度不能超过{max}")
    private String displayName;

    @AssertFalse(groups = NewEntityChecks.class, message = "新增用户必须是激活状态")
    private boolean locked = false;

    @AssertFalse(groups = NewEntityChecks.class, message = "新增用户需要激活才能登录")
    private boolean activated = false;

    @Column(name = "last_login_time",columnDefinition="datetime COMMENT '最后登录时间'")
    private LocalDateTime lastLoginTime;
    //账户地址
    private String accountAddress;
    //邮箱认证标识
    private boolean emailAuth=false;
    //手机号认证
    private boolean mobileAuth=false;
     
    //开始时间
    @DateTimeFormat(pattern="yyyy-MM-dd")
    private LocalDate startDate;
    
    public void setPlainPassword(String password) {
        if (!StringUtils.hasText(password)){
            this.password = "";
        }else{
            this.password = PasswordEncoderFactories.createDelegatingPasswordEncoder().encode(password);
        }
    }

    public User(String username, String displayName) {
        this.username = username;
        this.displayName = displayName;
    }
    public User(){}

    public static boolean validatePassword(String password){
        CharacterCharacteristicsRule characterCharacteristicsRule = new CharacterCharacteristicsRule(
                4,
                new CharacterRule(EnglishCharacterData.LowerCase),
                new CharacterRule(EnglishCharacterData.UpperCase),
                new CharacterRule(EnglishCharacterData.Digit),
                new CharacterRule(EnglishCharacterData.Special)
        );
        PasswordValidator passwordValidator = new PasswordValidator(
                characterCharacteristicsRule,
                new LengthRule(6,10)
                );
        PasswordData passwordData = new PasswordData(password);
        return passwordValidator.validate(passwordData).isValid();
    }
}


